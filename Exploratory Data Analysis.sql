

------------------------------------------------------- EXPLORATORY DATA ANALYSIS (EDA)  ---------------------------------------------------------

------------------------------------------------------------ DATABASE EXPLORATION -----------------------------------------------------
USE DataWarehouseAnalytics

--Explore All Objects in the Database
SELECT * FROM INFORMATION_SCHEMA.TABLES

-- Explore All Columns in the Database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS

----------------------------------------------------------- DIMENSIONS EXPLORATION---------------------------------------------------------

-- Explore the Countries the Customers come from
SELECT DISTINCT country
FROM [gold.customers]

--Explore All Categories "The Major Divisions"
SELECT DISTINCT category, subcategory
FROM [gold.products]

------------------------------------------------------------ DATE EXPLORATION -------------------------------------------------------------

---- Find the Youngest and Oldest Customer
SELECT 
MIN(birthdate) AS Oldest_birthdate,
MAX(birthdate) AS Youngest_birthdate 
FROM [gold.customers]

--- Find the date of the first and last order
SELECT 
MIN(order_date) AS first_order,
MAX(order_date) AS last_order
FROM [gold.fact_sales]

-- How many years of sales are avaliable
SELECT 
MIN(order_date) AS first_order,
MAX(order_date) AS last_order,
DATEDIFF(YEAR, MIN(order_date),MAX(order_date)) AS order_range_years
FROM [gold.fact_sales]

-- Determine the exact date
SELECT 
MIN(birthdate) AS Oldest_age,
DATEDIFF(YEAR, MIN(birthdate), GETDATE()) AS Oldest_age,
MAX(birthdate) AS Youngest_age,
DATEDIFF(YEAR, MAX(birthdate), GETDATE ()) AS Youngest_age
FROM [gold.customers]

--------------------------------------------------------- MEASURE EXLPORATION --------------------------------------------------------------------
-- Find the Total Sales
SELECT 
SUM (sales_amount) AS Total_Sales
FROM [gold.fact_sales]

-- Show how many items are sold
SELECT 
SUM (quantity) AS Items_Sold
FROM [gold.fact_sales]

-- Find the Average Selling Price
SELECT 
AVG(price) AS Average_Selling_Price
FROM [gold.fact_sales]

-- Find the Total numbers of Orders
SELECT 
COUNT(order_number) AS Total_Orders,
COUNT(DISTINCT order_number) AS Total_Distinct_Orders
FROM [gold.fact_sales]

-- Find the Total numbers of Products
SELECT
COUNT(product_number) AS Total_Products
FROM [gold.products]

-- Find the Total numbers of Customers
SELECT
COUNT(customer_id) AS Total_Customers
FROM [gold.customers]

-- Find the Total number of Customers that has place an order
SELECT
COUNT(DISTINCT customer_key) AS Total_Customers
FROM [gold.fact_sales]

-- Generate a Report that shows all key metrucs of the business

SELECT 'Total Sales' AS Measure_Name, SUM (sales_amount) AS Measure_Value FROM [gold.fact_sales]
UNION ALL
SELECT 'Total Quantity' AS Measure_Name, SUM (quantity) FROM [gold.fact_sales]
UNION ALL
SELECT 'Average Price' AS Measure_Name, AVG(price) FROM [gold.fact_sales]
UNION ALL
SELECT 'Total No. Orders' AS Measure_Name, COUNT (DISTINCT order_number) FROM [gold.fact_sales]
UNION ALL
SELECT 'Total No. Products' AS Measure_Name, COUNT (product_name) FROM [gold.products]
UNION ALL
SELECT 'Total No. Customers' AS Measure_Name, COUNT (customer_key) FROM [gold.fact_sales]

--------------------------------------------------------------- MAGNITUDE ------------------------------------------------------------
-- Find the Total Number of Customers by Countries
SELECT
country,
COUNT(customer_key) AS Total_Customers
FROM [gold.customers]
GROUP BY country
ORDER BY Total_Customers DESC

-- Find the Total Customers by Gender
SELECT 
gender AS Gender,
COUNT(customer_key) AS Total_Customers
FROM [gold.customers]
GROUP BY gender
ORDER BY Total_Customers DESC

-- What is the average cost in each category?
SELECT 
category AS Category,
AVG(cost) AS Average_Cost
FROM [gold.products]
GROUP BY category
ORDER BY Average_Cost DESC

-- What is the total Revenue generated by each category?
SELECT 
P.category AS Category,
SUM(F.sales_amount) AS Total_Revenue
FROM [gold.fact_sales] f
LEFT JOIN [gold.products] p
ON p.product_key = f.product_key
GROUP BY category
ORDER BY Total_Revenue DESC


-- Find the total revenue generated by each customer
SELECT
c.customer_number  Customer_ID,
c.first_name First_Name,
c.last_name Last_Name,
SUM(f.sales_amount) AS Total_Revenue 
FROM [gold.fact_sales] f
LEFT JOIN [gold.customers] c
ON c.customer_key = f.customer_key
GROUP BY 
c.customer_number,
c.first_name,
c.last_name
ORDER BY Total_Revenue DESC

-- What is the distribution of sold items across countries?
SELECT 
c.country AS Country,
SUM(f.quantity) AS Sold_Items
FROM [gold.fact_sales] f
LEFT JOIN [gold.customers] c
ON c.customer_key= f.customer_key
GROUP BY c.country
ORDER BY Sold_Items DESC

-- What Product Line Generated the most revenue

SELECT 
p.category AS Category,
p.subcategory AS Subcategory,
p.product_line Product_Line,
SUM(f.sales_amount) AS Top_Revenue_Line
FROM [gold.fact_sales] f
LEFT JOIN [gold.products] p
ON p.product_key = f.product_key
GROUP BY 
p.category,
p.subcategory,
p.product_line
ORDER BY Top_Revenue_Line DESC

-------------------------------------------------------- RANKING --------------------------------------------------------------------------
-- Which 5 Products generate the Highest Revenue
SELECT TOP 5
p. product_name Product_Name,
p.product_number Product_Number,
SUM(f.sales_amount) AS Highest_Revenue
FROM [gold.fact_sales] f
LEFT JOIN [gold.products] p
ON p.product_key=f.product_key
GROUP BY
p. product_name,
p.product_number
ORDER BY Highest_Revenue DESC

SELECT TOP 5
p. product_line Product_Line,
SUM(f.sales_amount) AS Highest_Revenue
FROM [gold.fact_sales] f
LEFT JOIN [gold.products] p
ON p.product_key=f.product_key
GROUP BY
p. product_line
ORDER BY Highest_Revenue DESC 

SELECT *
FROM (
	SELECT
	p.product_name Product_Name,
	SUM(f.sales_amount) AS Highest_Revenue,
	ROW_NUMBER() OVER (ORDER BY SUM(f.sales_amount)  DESC) AS rank_products
	FROM [gold.fact_sales] f
	LEFT JOIN [gold.products] p
	ON p.product_key=f.product_key
	GROUP BY
	p. product_name)t
WHERE rank_products <= 5

-- What are the 5 Worst-Performing Products in the terms sales
SELECT TOP 5
p. product_name Product_Name,
p.product_number Product_Number,
SUM(f.sales_amount) AS Highest_Revenue
FROM [gold.fact_sales] f
LEFT JOIN [gold.products] p
ON p.product_key=f.product_key
GROUP BY
p. product_name,
p.product_number
ORDER BY Highest_Revenue 

-- Find the top 10 customers who have generated the highest revenue
SELECT TOP 10
c.first_name First_Name,
c.last_name Last_Name,
SUM(f.sales_amount) AS Highest_Revenue
FROM [gold.fact_sales] f
LEFT JOIN [gold.customers] c
ON c.customer_key=f.customer_key
GROUP BY
c.first_name,
c.last_name
ORDER BY Highest_Revenue DESC


SELECT *
 FROM (
	SELECT 
	c.first_name First_Name,
	c.last_name Last_Name,
	SUM(f.sales_amount) AS Highest_Revenue,
	ROW_NUMBER () OVER (ORDER BY SUM(f.sales_amount) DESC) rank_customers
	FROM [gold.fact_sales] f
	LEFT JOIN [gold.customers] c
	ON c.customer_key=f.customer_key
	GROUP BY
	c.first_name,
	c.last_name)t

WHERE rank_customers <=10

--The 3 Customers with fewest orders

SELECT TOP 3
c.first_name First_Name,
c.last_name Last_Name,
COUNT(quantity) AS Total_Orders
FROM [gold.fact_sales] f
LEFT JOIN [gold.customers] c
ON c.customer_key=f.customer_key
GROUP BY
c.first_name,
c.last_name
ORDER BY Total_Orders




----------------------------------------------------------- WITH WINDOWS FUNCTION ------------------------------------------------------

SELECT * 
FROM (
		SELECT
		c.first_name First_Name,
		c.last_name Last_Name,
		SUM(f.sales_amount) Total_Sales,
		ROW_NUMBER() OVER(ORDER BY SUM (f.sales_amount)) ranking_sales
		FROM [gold.fact_sales] f
		LEFT JOIN [gold.customers] c
		ON c.customer_key =f.customer_key
		GROUP BY 
		c.first_name,
		c.last_name
	)t
WHERE ranking_sales <= 3


SELECT TOP 3
c.first_name First_Name,
c.last_name Last_Name,
SUM(f.sales_amount) Total_Sales,
ROW_NUMBER() OVER(ORDER BY SUM (f.sales_amount)) ranking_sales
FROM [gold.fact_sales] f
LEFT JOIN [gold.customers] c
ON c.customer_key =f.customer_key
GROUP BY 
c.first_name,
c.last_name
